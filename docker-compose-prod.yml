version: '3'
services:
  backend:
    build:
      context: ./backend
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.app.loadbalancer.server.port=8000
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.app-http.entrypoints=http
      - traefik.http.routers.app-http.rule=Host(`fastapi.localhost`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      # - traefik.http.routers.app-https.entrypoints=https
      # - traefik.http.routers.app-https.rule=Host(`fastapi-with-traefik.example.com`)
      # - traefik.http.routers.app-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      # - traefik.http.routers.app-https.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      # - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
      # - traefik.http.routers.app-http.middlewares=https-redirect
      # - traefik.http.routers.app-https.middlewares=admin-auth
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
    depends_on:
      - redis
  frontend:
    build:
      context: ./frontend
    labels:
      # Enable Traefik for this specific "frontend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.front.loadbalancer.server.port=5173
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.front-http.entrypoints=http
      - traefik.http.routers.front-http.rule=Host(`nlp.localhost`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      # - traefik.http.routers.app-https.entrypoints=https
      # - traefik.http.routers.app-https.rule=Host(`fastapi-with-traefik.example.com`)
      # - traefik.http.routers.app-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      # - traefik.http.routers.app-https.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      # - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      # - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
      # - traefik.http.routers.app-http.middlewares=https-redirect
      # - traefik.http.routers.app-https.middlewares=admin-auth
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    environment:
      - "discovery.type=single-node"
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    environment:
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200"

networks:
  traefik-public:
    external: false